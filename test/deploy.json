{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.6.18.56646",
      "templateHash": "13116535292766865639"
    }
  },
  "parameters": {
    "spokeVnets": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Hub Virtual Network configurations."
      }
    },
    "hubVirtualNetwork": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Hub Virtual Network configurations."
      }
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The Virtual Network (vNet) Name."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "addressPrefixes": {
      "type": "array",
      "metadata": {
        "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
      }
    },
    "subnets": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. An Array of subnets to deploy to the Virtual Network."
      }
    },
    "virtualNetworkPeerings": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Virtual Network Peerings configurations."
      }
    },
    "subscriptionId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The subscription ID of the subscription for the virtual network"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the resource group for the virtual network"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "dnsServers": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. DNS Servers associated to the Virtual Network."
      }
    },
    "ddosProtectionPlanId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
      }
    }
  },
  "variables": {
    "dnsServers_var": {
      "dnsServers": "[array(parameters('dnsServers'))]"
    },
    "ddosProtectionPlan": {
      "id": "[parameters('ddosProtectionPlanId')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "copy": [
          {
            "name": "subnets",
            "count": "[length(parameters('subnets'))]",
            "input": {
              "name": "[parameters('subnets')[copyIndex('subnets')].name]",
              "properties": {
                "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                "addressPrefixes": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'addressPrefixes'), parameters('subnets')[copyIndex('subnets')].addressPrefixes, createArray())]",
                "applicationGatewayIpConfigurations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'applicationGatewayIpConfigurations'), parameters('subnets')[copyIndex('subnets')].applicationGatewayIpConfigurations, createArray())]",
                "delegations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'delegations'), parameters('subnets')[copyIndex('subnets')].delegations, createArray())]",
                "ipAllocations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'ipAllocations'), parameters('subnets')[copyIndex('subnets')].ipAllocations, createArray())]",
                "natGateway": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'natGatewayId'), createObject('id', parameters('subnets')[copyIndex('subnets')].natGatewayId), json('null'))]",
                "networkSecurityGroup": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'networkSecurityGroupId'), createObject('id', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupId), json('null'))]",
                "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateEndpointNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies, null())]",
                "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateLinkServiceNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies, null())]",
                "routeTable": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'routeTableId'), createObject('id', parameters('subnets')[copyIndex('subnets')].routeTableId), json('null'))]",
                "serviceEndpoints": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpoints'), parameters('subnets')[copyIndex('subnets')].serviceEndpoints, createArray())]",
                "serviceEndpointPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpointPolicies'), parameters('subnets')[copyIndex('subnets')].serviceEndpointPolicies, createArray())]"
              }
            }
          }
        ],
        "addressSpace": {
          "addressPrefixes": "[parameters('addressPrefixes')]"
        },
        "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanId'))), variables('ddosProtectionPlan'), null())]",
        "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), variables('dnsServers_var'), null())]",
        "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanId')))]"
      }
    },
    {
      "copy": {
        "name": "spokeVnet",
        "count": "[length(parameters('spokeVnets'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('VNet-Module-{0}', parameters('spokeVnets')[copyIndex()].name)]",
      "subscriptionId": "[parameters('spokeVnets')[copyIndex()].subscriptionId]",
      "resourceGroup": "[parameters('spokeVnets')[copyIndex()].resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "hubVnetName": {
            "value": "[parameters('name')]"
          },
          "hubVnetId": {
            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
          },
          "name": {
            "value": "[parameters('spokeVnets')[copyIndex()].name]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "addressPrefixes": {
            "value": "[parameters('spokeVnets')[copyIndex()].addressPrefixes]"
          },
          "subnets": {
            "copy": [
              {
                "name": "value",
                "count": "[length(parameters('spokeVnets')[copyIndex()].subnets)]",
                "input": "[createObject('name', parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')].name, 'addressPrefix', parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')].addressPrefix, 'addressPrefixes', if(contains(parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')], 'addressPrefixes'), parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')].addressPrefixes, createArray()), 'applicationGatewayIpConfigurations', if(contains(parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')], 'applicationGatewayIpConfigurations'), parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')].applicationGatewayIpConfigurations, createArray()), 'delegations', if(contains(parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')], 'delegations'), parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')].delegations, createArray()), 'ipAllocations', if(contains(parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')], 'ipAllocations'), parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')].ipAllocations, createArray()), 'natGateway', if(contains(parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')], 'natGatewayId'), createObject('id', parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')].natGatewayId), json('null')), 'networkSecurityGroup', if(contains(parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')], 'networkSecurityGroupId'), createObject('id', parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')].networkSecurityGroupId), json('null')), 'privateEndpointNetworkPolicies', if(contains(parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')], 'privateEndpointNetworkPolicies'), parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')].privateEndpointNetworkPolicies, null()), 'privateLinkServiceNetworkPolicies', if(contains(parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')], 'privateLinkServiceNetworkPolicies'), parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')].privateLinkServiceNetworkPolicies, null()), 'routeTable', if(contains(parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')], 'routeTableId'), createObject('id', parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')].routeTableId), json('null')), 'serviceEndpoints', if(contains(parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')], 'serviceEndpoints'), parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')].serviceEndpoints, createArray()), 'serviceEndpointPolicies', if(contains(parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')], 'serviceEndpointPolicies'), parameters('spokeVnets')[copyIndex()].subnets[copyIndex('value')].serviceEndpointPolicies, createArray()))]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "3325362430259507767"
            }
          },
          "parameters": {
            "hubVnetName": {
              "type": "string"
            },
            "hubVnetId": {
              "type": "string"
            },
            "virtualNetworkPeerings": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Virtual Network Peerings configurations."
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The subscription ID of the subscription for the virtual network"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the resource group for the virtual network"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The Virtual Network (vNet) Name."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "addressPrefixes": {
              "type": "array",
              "metadata": {
                "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
              }
            },
            "subnets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. An Array of subnets to deploy to the Virtual Network."
              }
            },
            "dnsServers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. DNS Servers associated to the Virtual Network."
              }
            },
            "ddosProtectionPlanId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "diagnosticLogCategoriesToEnable": {
              "type": "array",
              "defaultValue": [
                "VMProtectionAlerts"
              ],
              "allowedValues": [
                "VMProtectionAlerts"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "diagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "diagnosticSettingsName": {
              "type": "string",
              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "metadata": {
                "description": "Optional. The name of the diagnostic setting, if deployed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                "input": {
                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                "input": {
                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "dnsServers_var": {
              "dnsServers": "[array(parameters('dnsServers'))]"
            },
            "ddosProtectionPlan": {
              "id": "[parameters('ddosProtectionPlanId')]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "subnets",
                    "count": "[length(parameters('subnets'))]",
                    "input": {
                      "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                      "properties": {
                        "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                        "addressPrefixes": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'addressPrefixes'), parameters('subnets')[copyIndex('subnets')].addressPrefixes, createArray())]",
                        "applicationGatewayIpConfigurations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'applicationGatewayIpConfigurations'), parameters('subnets')[copyIndex('subnets')].applicationGatewayIpConfigurations, createArray())]",
                        "delegations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'delegations'), parameters('subnets')[copyIndex('subnets')].delegations, createArray())]",
                        "ipAllocations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'ipAllocations'), parameters('subnets')[copyIndex('subnets')].ipAllocations, createArray())]",
                        "natGateway": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'natGatewayId'), createObject('id', parameters('subnets')[copyIndex('subnets')].natGatewayId), json('null'))]",
                        "networkSecurityGroup": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'networkSecurityGroupId'), createObject('id', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupId), json('null'))]",
                        "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateEndpointNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies, null())]",
                        "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateLinkServiceNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies, null())]",
                        "routeTable": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'routeTableId'), createObject('id', parameters('subnets')[copyIndex('subnets')].routeTableId), json('null'))]",
                        "serviceEndpoints": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpoints'), parameters('subnets')[copyIndex('subnets')].serviceEndpoints, createArray())]",
                        "serviceEndpointPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpointPolicies'), parameters('subnets')[copyIndex('subnets')].serviceEndpointPolicies, createArray())]"
                      }
                    }
                  }
                ],
                "addressSpace": {
                  "addressPrefixes": "[parameters('addressPrefixes')]"
                },
                "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanId'))), variables('ddosProtectionPlan'), null())]",
                "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), variables('dnsServers_var'), null())]",
                "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanId')))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
      ]
    },
    {
      "copy": {
        "name": "virtualNetwork_peering_local",
        "count": "[length(parameters('spokeVnets'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-virtualNetworkPeering-local', parameters('spokeVnets')[copyIndex()].name)]",
      "subscriptionId": "[parameters('spokeVnets')[copyIndex()].subscriptionId]",
      "resourceGroup": "[parameters('spokeVnets')[copyIndex()].resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "localVnetName": {
            "value": "[parameters('spokeVnets')[copyIndex()].name]"
          },
          "remoteVirtualNetworkId": {
            "value": "/subscriptions/e6c61ac5-feea-4459-93fc-7131f8352553/resourceGroups/rg-ccs-prod-usva-vnet/providers/Microsoft.Network/virtualNetworks/vnet-ccs-prod-usva-conn"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "17873984867347168035"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]",
              "metadata": {
                "description": "Optional. The Name of Vnet Peering resource. If not provided, default value will be localVnetName-remoteVnetName"
              }
            },
            "localVnetName": {
              "type": "string",
              "metadata": {
                "description": "Required. The Name of the Virtual Network to add the peering to."
              }
            },
            "remoteVirtualNetworkId": {
              "type": "string",
              "metadata": {
                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID"
              }
            },
            "allowForwardedTraffic": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true"
              }
            },
            "allowGatewayTransit": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false"
              }
            },
            "allowVirtualNetworkAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true"
              }
            },
            "doNotVerifyRemoteGateways": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true"
              }
            },
            "useRemoteGateways": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false"
              }
            },
            "virtualNetworkPeerings": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Virtual Network Peerings configurations."
              }
            }
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('virtualNetworkPeerings')))]",
              "copy": {
                "name": "vNetPeering",
                "count": "[length(parameters('virtualNetworkPeerings'))]"
              },
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', parameters('localVnetName'), if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'name'), parameters('virtualNetworkPeerings')[copyIndex()].name, format('{0}/{1}', parameters('localVnetName'), parameters('name'))))]",
              "properties": {
                "allowForwardedTraffic": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'allowForwardedTraffic'), parameters('virtualNetworkPeerings')[copyIndex()].allowForwardedTraffic, true())]",
                "allowGatewayTransit": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'allowGatewayTransit'), parameters('virtualNetworkPeerings')[copyIndex()].allowGatewayTransit, false())]",
                "allowVirtualNetworkAccess": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'allowVirtualNetworkAccess'), parameters('virtualNetworkPeerings')[copyIndex()].allowVirtualNetworkAccess, true())]",
                "doNotVerifyRemoteGateways": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'doNotVerifyRemoteGateways'), parameters('virtualNetworkPeerings')[copyIndex()].doNotVerifyRemoteGateways, true())]",
                "useRemoteGateways": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'useRemoteGateways'), parameters('virtualNetworkPeerings')[copyIndex()].useRemoteGateways, false())]",
                "remoteVirtualNetwork": {
                  "id": "[parameters('remoteVirtualNetworkId')]"
                }
              }
            }
          ]
        }
      }
    }
  ]
}
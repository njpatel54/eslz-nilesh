name: 2 - management services

on:
  # push:
  #   branches: 
  #     - master
  #     - main 
  #     - dev
  #   paths:
  #     - .github/workflows/2-management-services.yml
  #     - eslz/management-services/*
    
  # pull_request:
  #   branches: [ main ]

  workflow_dispatch:

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: 'Lint and Build Bicep'
      run: az bicep build --file ./eslz/managementServices/deploy.bicep
      
  validate:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
    - uses: actions/checkout@v2
    
    - uses: azure/login@v1
      name: 'Login to Azure'
      with: 
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: ${{ secrets.AZURE_ENVIRONMENT }}
          enable-AzPSSession: false
        
    - name: 'Set Azure Subscription'
      run: az account set --subscription ${{ secrets.AZURE_MGMTSUBSCRIPTIONID }}

    - uses: Azure/cli@v1
      name: 'Run preflight validation'
      with:
        inlineScript: |
          az deployment tenant validate \
            --name 'Deploy-Platform-Management-Services' \
            --location ${{ secrets.AZURE_LOCATION }} \
            --template-file ./eslz/managementServices/deploy.bicep \
            --parameters ./eslz/managementServices/.parameters/parameters.json \
            --parameters ./eslz/managementGroups/.parameters/parameters.json \
            --parameters location=${{ secrets.AZURE_LOCATION }} \
                         mgmtsubid=${{ secrets.AZURE_MGMTSUBSCRIPTIONID }}

  preview:
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
    - uses: actions/checkout@v2
    
    - uses: azure/login@v1
      name: 'Login to Azure'
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        environment: ${{ secrets.AZURE_ENVIRONMENT }}
        enable-AzPSSession: false
      
    - name: 'Set Azure Subscription'
      run: az account set --subscription ${{ secrets.AZURE_MGMTSUBSCRIPTIONID }}
              
    - uses: Azure/cli@v1
      name: 'Run what-if'
      with:
        inlineScript: |
          az deployment tenant what-if \
            --location ${{ secrets.AZURE_LOCATION }} \
            --name 'Deploy-Platform-Management-Services' \
            --template-file ./eslz/managementServices/deploy.bicep \
            --parameters ./eslz/managementServices/.parameters/parameters.json \
            --parameters ./eslz/managementGroups/.parameters/parameters.json \
            --parameters location=${{ secrets.AZURE_LOCATION }} \
                         mgmtsubid=${{ secrets.AZURE_MGMTSUBSCRIPTIONID }}

  deploy:
    runs-on: ubuntu-latest
    needs: [preview]
    environment: Production
    steps:
    - uses: actions/checkout@v2
    
    - uses: azure/login@v1
      name: 'Login to Azure'
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        environment: ${{ secrets.AZURE_ENVIRONMENT }}
        enable-AzPSSession: false
      
    - name: 'Set Azure Subscription'
      run: az account set --subscription ${{ secrets.AZURE_MGMTSUBSCRIPTIONID }}
              
    - uses: Azure/cli@v1
      name: 'Deploying Management Services'
      with:
        inlineScript: |
          deploymentOutput=$(az deployment tenant create \
            --name 'Deploy-Platform-Management-Services' \
            --location ${{ secrets.AZURE_LOCATION }} \
            --template-file ./eslz/managementServices/deploy.bicep \
            --parameters ./eslz/managementServices/.parameters/parameters.json \
            --parameters ./eslz/managementGroups/.parameters/parameters.json \
            --parameters location=${{ secrets.AZURE_LOCATION }} \
                         mgmtsubid=${{ secrets.AZURE_MGMTSUBSCRIPTIONID }})
          logaId=$(echo $deploymentOutput | jq -r '.properties.outputs.logaId.value')
          saId=$(echo $deploymentOutput | jq -r '.properties.outputs.saId.value')
          ehName=$(echo $deploymentOutput | jq -r '.properties.outputs.ehName.value')
          ehnsAuthorizationId=$(echo $deploymentOutput | jq -r '.properties.outputs.ehnsAuthorizationId.value')
          echo $logaId
          echo $saId
          echo $ehName
          echo $ehnsAuthorizationId
    
    - uses: gliech/create-github-secret-action@v1
      name: 'Create GitHub Secret - AZURE_LAWORKSPACEID'
      with:
       name: AZURE_LAWORKSPACEID
       value: $logaId
       pa_token: ${{ secrets.ESLZ_TOKEN }}
    
    - uses: gliech/create-github-secret-action@v1
      name: 'Create GitHub Secret - AZURE_DIAGSTORAGEACCTID'
      with:
       name: AZURE_DIAGSTORAGEACCTID
       value: $saId
       pa_token: ${{ secrets.ESLZ_TOKEN }} 
  
    - uses: gliech/create-github-secret-action@v1
      name: 'Create GitHub Secret - AZURE_DIAGEHNAME'
      with:
       name: AZURE_DIAGEHNAME
       value: $ehName
       pa_token: ${{ secrets.ESLZ_TOKEN }} 

    - uses: gliech/create-github-secret-action@v1
      name: 'Create GitHub Secret - AZURE_DIAGEHAUTHRULEID'
      with:
       name: AZURE_DIAGEHAUTHRULEID
       value: $ehnsAuthorizationId
       pa_token: ${{ secrets.ESLZ_TOKEN }} 